<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 保留一个空的映射文件,满足mybatis的要求 -->
<mapper namespace="com.cat.order.mapper.OrderMapper">
	<update id="updateStatusByDate">
		<!-- 万能转义表达式 可以转义任意字符 -->
		<![CDATA[update tb_order set status = 6 where created < #{time} and status =1]]>
	</update>
	
	<!-- 通过orderId实现数据关联查询 -->
	<select id="queryByOrderId" resultMap="orderRM">
		<!-- 查询orderId表数据 -->
		select * from tb_order where order_id=#{orderId}
	</select>
		<!-- 属性分析
				type:返回的数据类型
				id:定义唯一标识resultMap 方便被别人调用
				autoMapping="true"实现驼峰规则的自动映射 能够将数据表中的全部字段映射到全部属性中 -->
	<resultMap type="Order" id="orderRM" autoMapping="true">
		<!-- 进行关联封装时 必须先封装主键 -->
		<id column="order_id" property="orderId"/>
		<!-- 由于需要关联映射 需要为orderShipping赋值
				一对一封装orderShipping
				association 表示一对一封装 表示一个对象
				property="orderShipping" Order对象中的属性orderShipping，为对象进行赋值
				javaType="封装对象的数据类型" 与一对一映射标签association是固定搭配
		 -->
		 <association property="orderShipping" column="order_id" javaType="OrderShipping" select="queryOrderShipping" />
		 <!-- 封装orderItemList集合 -->
		 <collection property="orderItems" ofType="OrderItem" column="order_id" select="queryOrderItems" />
	</resultMap>
	<select id="queryOrderShipping" resultType="OrderShipping">
		select * from tb_order_shipping where order_id=#{orderId}
	</select>
	<select id="queryOrderItems" resultType="OrderItem">
		select * from tb_order_item where order_id=#{orderId}
	</select>
</mapper>